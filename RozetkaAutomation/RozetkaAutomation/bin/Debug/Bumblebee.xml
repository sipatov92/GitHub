<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bumblebee</name>
    </assembly>
    <members>
        <member name="M:Bumblebee.Extensions.AdvancedSeleniumActions.Hover``1(``0,System.Int32)">
            <summary>
            Hovers the specified element.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="element">The element.</param>
            <param name="miliseconds">The miliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:Bumblebee.Extensions.AdvancedSeleniumActions.Drag``1(``0,System.Func{``0,Bumblebee.Interfaces.IDraggable})">
            <summary>
            Drags an element from the specified parent block.
            </summary>
            <typeparam name="TParent">The type of the parent block.</typeparam>
            <param name="parent">The parent block.</param>
            <param name="getDraggable">The get draggable.</param>
            <returns></returns>
        </member>
        <member name="M:Bumblebee.Extensions.AdvancedSeleniumActions.WaitUntil``1(``0,System.Predicate{``0},System.Int32)">
            <summary>
            Waits the until.
            </summary>
            <typeparam name="TParent">The type of the parent block.</typeparam>
            <param name="parent">The parent block.</param>
            <param name="condition">The condition.</param>
            <param name="miliseconds">The miliseconds.</param>
            <returns></returns>
        </member>
        <member name="T:Bumblebee.Extensions.DragAction`1">
            <summary>
            Represents the drag action.
            </summary>
            <typeparam name="TParent">The type of the parent block.</typeparam>
        </member>
        <member name="M:Bumblebee.Extensions.DragAction`1.#ctor(`0,System.Func{`0,Bumblebee.Interfaces.IDraggable})">
            <summary>
            Initializes a new instance of the <see cref="T:Bumblebee.Extensions.DragAction`1"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="getDraggable">The get draggable.</param>
        </member>
        <member name="M:Bumblebee.Extensions.DragAction`1.AndDrop(System.Func{`0,Bumblebee.Interfaces.IHasBackingElement})">
            <summary>
            Fluent syntax for indicating the drop element.
            </summary>
            <param name="getDropzone">The get dropzone.</param>
            <returns></returns>
        </member>
        <member name="M:Bumblebee.Extensions.DragAction`1.AndDrop``1(System.Func{`0,Bumblebee.Interfaces.IHasBackingElement})">
            <summary>
            Fluent syntax for indicating the drop element.
            </summary>
            <typeparam name="TCustomResult">The type of the custom result.</typeparam>
            <param name="getDropzone">The get dropzone.</param>
            <returns></returns>
        </member>
        <member name="M:Bumblebee.Extensions.DragAction`1.AndDrop(System.Int32,System.Int32)">
            <summary>
            Fluent syntax for indicating the drop element.
            </summary>
            <param name="xOffset">The x offset.</param>
            <param name="yOffset">The y offset.</param>
            <returns></returns>
        </member>
        <member name="M:Bumblebee.Extensions.DragAction`1.AndDrop``1(System.Int32,System.Int32)">
            <summary>
            Fluent syntax for indicating the drop element.
            </summary>
            <typeparam name="TCustomResult">The type of the custom result.</typeparam>
            <param name="xOffset">The x offset.</param>
            <param name="yOffset">The y offset.</param>
            <returns></returns>
        </member>
        <member name="T:Bumblebee.Extensions.Verification">
            <summary>
            Extension methods for verifying values.
            </summary>
        </member>
        <member name="M:Bumblebee.Extensions.Verification.Verify``1(``0,System.String,System.Predicate{``0})">
            <summary>
            Verification method that allows for passing a predicate expression to evaluate some condition and a message to display if predicate is not true.
            </summary>
            <remarks>
            When throwing an error on verification, the system will add "Unable to verify " to anything that you pass as a message.  The recommendation is that you 
            write your verification strings starting with "that".  An example verification of "that string is empty." would return "Unable to verify that string is empty."
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="verification"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Bumblebee.Extensions.Verification.Verify``1(``0,System.Linq.Expressions.Expression{System.Predicate{``0}})">
            <summary>
            Verification method that allows for passing a predicate expression to evaluate some condition.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <param name="predicateExpression">The expression.</param>
            <returns></returns>
            <remarks>
            If the predicate fails, the system will throw a verification exception with the message "Unable to verify custom verification."
            </remarks>
        </member>
        <member name="M:Bumblebee.Extensions.Verification.VerifyThat``1(``0,System.Action{``0})">
            <summary>
            Verification method that allows for passing an assertion from any assertion library.
            </summary>
            <remarks>
            The message that is thrown from the assertion library that you use will be captured in the VerificationException.
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="assertion"></param>
            <returns></returns>
        </member>
        <member name="M:Bumblebee.Extensions.Verification.VerifySelected``1(``0,System.Boolean)">
            <summary>
            Verifies whether or not the element is selected.
            </summary>
            <typeparam name="TSelectable">The type of the selectable.</typeparam>
            <param name="selectable">The selectable element.</param>
            <param name="selected">if set to <c>true</c> verifies whether element is selected and vice versa.</param>
            <returns></returns>
            <exception cref="T:Bumblebee.Exceptions.VerificationException">Selection verification failed. Expected: {0}, Actual: {1}..FormatWith(selected, selectable.Selected)</exception>
        </member>
        <member name="T:Bumblebee.Interfaces.IDateField">
            <summary>
            An input[type='date'] in a browser.
            </summary>
        </member>
        <member name="M:Bumblebee.Interfaces.IDateField.EnterDate``1(System.DateTime)">
            <summary>
            Enters a date into the date field
            </summary>
            <typeparam name="TCustomResult">The type of the block this element is on.</typeparam>
            <param name="date">The date to enter</param>
            <returns>The current block</returns>
        </member>
        <member name="P:Bumblebee.Interfaces.IDateField.Value">
            <summary>
            Gets the value as a DateTime. Tries to parse according to CurrentUICulture.
            </summary>
            <value>
            The value as a DateTime or null if it couldn't be parsed.
            </value>
        </member>
        <member name="T:Bumblebee.Interfaces.IDateField`1">
            <summary>
            An input[type='date'] in a browser.
            </summary>
            <typeparam name="TResult">The type of the block this element is on.</typeparam>
        </member>
        <member name="M:Bumblebee.Interfaces.IDateField`1.EnterDate(System.DateTime)">
            <summary>
            Enters a date into the date field
            </summary>
            <param name="date">The date to enter</param>
            <returns>The current block</returns>
        </member>
        <member name="T:Bumblebee.Interfaces.IDoubleClickable">
            <summary>
            Element that is double-clickable with a static page return.
            </summary>
        </member>
        <member name="T:Bumblebee.Interfaces.IDoubleClickable`1">
            <summary>
            Element that is double-clickable with a dynamic page return.
            </summary>
            <typeparam name="TResult">The type of page to return.</typeparam>
        </member>
        <member name="T:Bumblebee.Interfaces.INumericField">
            <summary>
            An input[type='number'] in a browser.
            </summary>
        </member>
        <member name="M:Bumblebee.Interfaces.INumericField.EnterNumber``1(System.Double)">
            <summary>
            Enters a number into the number field
            </summary>
            <typeparam name="TCustomResult">The type of the block this element is on.</typeparam>
            <param name="number">The number to enter</param>
            <returns>The current block</returns>
        </member>
        <member name="P:Bumblebee.Interfaces.INumericField.Value">
            <summary>
            Gets the value as a double. Tries to parse according to CurrentUICulture.
            </summary>
            <value>
            The value as a double or null if it couldn't be parsed.
            </value>
        </member>
        <member name="T:Bumblebee.Interfaces.INumericField`1">
            <summary>
            An input[type='number'] in a browser.
            </summary>
            <typeparam name="TResult">The type of the block this element is on.</typeparam>
        </member>
        <member name="M:Bumblebee.Interfaces.INumericField`1.EnterNumber(System.Double)">
            <summary>
            Enters a number into the number field
            </summary>
            <param name="number">The number to enter</param>
            <returns>The current block</returns>
        </member>
        <member name="T:Bumblebee.Implementation.WebBlock">
            <summary>
            Base block for typical web pages allowing for specifying a common wait timeout for finding elements.
            </summary>
        </member>
        <member name="M:Bumblebee.Implementation.WebBlock.#ctor(Bumblebee.Setup.Session,System.TimeSpan)">
            <summary>
            Constructor that allows for overriding the default timeout for waits.
            </summary>
            <param name="session">The session to be used for finding elements in the derived page.</param>
            <param name="timeout">The timeout period for waits represented as a TimeSpan</param>
        </member>
        <member name="M:Bumblebee.Implementation.WebBlock.#ctor(Bumblebee.Setup.Session)">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            The default timeout for waiting for elements is 3000 ticks (3-100 nano seconds).  If you need to override this value, call the other constructor.
            </remarks>
            <param name="session">The sessionto be used for finding elements in the derived page.</param>
        </member>
        <member name="P:Bumblebee.Implementation.WebBlock.Wait">
            <summary>
            A common wait timeout that can be used when trying to find elements within derived pages or blocks.
            </summary>
        </member>
        <member name="T:Bumblebee.BumblebeeAttribute">
            <summary>
            An attribute that tells Bumblebee to ignore this type/class when determining the file name to use when capturing the screen.
            </summary>
            <remarks>
            On screen capture, Bumblebee will use the name of the class and method outside of Bumblebee internal classes to name the image.  
            Apply this attribute to any type that you do not want Bumblebee to use for the naming.  
            For example, any third party element projects such as Bumblebee.KendoUI.
            </remarks>
        </member>
        <member name="T:Bumblebee.Key">
            <summary>
            Represents the key on the keyboard.
            </summary>
        </member>
        <member name="T:Bumblebee.Key.Function">
            <summary>
            Represents the function keys found at the top of a standard keyboard.
            </summary>
        </member>
        <member name="T:Bumblebee.Key.Arrows">
            <summary>
            Represents the arrow keys found to the right on a standard keyboard.
            </summary>
        </member>
        <member name="T:Bumblebee.Key.Numpad">
            <summary>
            Represents the keys that are part of the standard 10-key on the far right of a standard keyboard.
            </summary>
        </member>
        <member name="T:Bumblebee.Key.Other">
            <summary>
            Represents the keys not found in any of the other regions on the keyboard.
            </summary>
        </member>
        <member name="T:Bumblebee.Setup.ISettings">
            <summary>
            An interface to specify the settings that are useful to the Session.
            </summary>
        </member>
        <member name="P:Bumblebee.Setup.ISettings.ScreenCapturePath">
            <summary>
            Gets the screen capture output path.
            </summary>
            <value>
            The screen capture path.
            </value>
        </member>
        <member name="P:Bumblebee.Setup.ISettings.CaptureScreenOnVerificationFailure">
            <summary>
            Gets whether or not to implicitly capture screenshots on a verification failure.
            </summary>
        </member>
        <member name="T:Bumblebee.Exceptions.VerificationException">
            <summary>
            The exception that is thrown when a verification fails.
            </summary>
        </member>
        <member name="M:Bumblebee.Exceptions.VerificationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bumblebee.Exceptions.VerificationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Bumblebee.Exceptions.VerificationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Bumblebee.Exceptions.VerificationException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Bumblebee.Setup.Settings">
            <summary>
            A simple in-memory version of the <see cref="T:Bumblebee.Setup.ISettings"/> interface.
            </summary>
        </member>
        <member name="M:Bumblebee.Setup.Settings.#ctor">
            <summary>
            Initializes a default instance of the <see cref="T:Bumblebee.Setup.Settings"/> class with <see cref="P:Bumblebee.Setup.Settings.ScreenCapturePath"/> of the current directory.
            </summary>
        </member>
        <member name="P:Bumblebee.Setup.Settings.ScreenCapturePath">
            <summary>
            Gets or sets the screen capture output path.
            </summary>
            <value>
            The screen capture path.
            </value>
        </member>
        <member name="T:Bumblebee.Setup.Threaded`1">
            <summary>
            Creates thread-safe instances of sessions.
            </summary>
            <typeparam name="TSession"></typeparam>
        </member>
        <member name="M:Bumblebee.Setup.Threaded`1.With``1">
            <summary>
            Allows the creation of a Session-based type using a type derived from IDriverEnvironment that the system can initialize with a parameterless constructor.
            </summary>
            <typeparam name="TDriverEnvironment"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Bumblebee.Setup.Threaded`1.With(Bumblebee.Setup.IDriverEnvironment)">
            <summary>
            Allows the creation of a Session-based type using an instance of a type of IDriverEnvironment.
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
    </members>
</doc>
